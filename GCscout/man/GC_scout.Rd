% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fns.R
\name{GC_scout}
\alias{GC_scout}
\title{Fit the covariance-regularized regression under Gaussian
copula model (GC-Scout).}
\usage{
GC_scout(
  x,
  y,
  lam1s,
  lam2s,
  d2,
  gc_scout_01 = TRUE,
  gc_scout_21 = TRUE,
  gc_scout_11 = TRUE
)
}
\arguments{
\item{x}{A numeric matrix. Used for training.}

\item{y}{A numeric vector. Used for training.}

\item{lam1s}{A numeric number or vector. The tuning parameters for
regularization of the covariance matrix. If
\code{gc_scout_01 = TRUE}, then no covariance regularization
is taking place and \code{lam1s} will be ignored. If
\code{gc_scout_11 = TRUE},  as graphical lasso can be uncomfortably slow.}

\item{lam2s}{A numeric number or vector. The tuning parameters
for the \eqn{L_1} regularization of the regression coefficients,
using the regularized covariance matrix.}

\item{d2}{A numeric vector. The indices of discrete variables in \code{x}.}

\item{gc_scout_01}{A logical value. If TRUE, GC_Scout(0,1) (aka GC Lasso) will be performed. Default is TRUE.}

\item{gc_scout_21}{A logical value. If TRUE, GC_Scout(2,1) will be performed. Default is TRUE.}

\item{gc_scout_11}{A logical value. If TRUE, GC_Scout(1,1) will be performed. Default is TRUE.}
}
\value{
\itemize{
  \item beta_gc_scout_01_mat - the beta estimates for GC_Scout(0,1) model (\code{gc_scout_01 = TRUE})
  \item beta_gc_scout_21_mat - the beta estimates for GC_Scout(2,1) model (\code{gc_scout_21 = TRUE})
  \item beta_gc_scout_11_mat - the beta estimates for GC_Scout(1,1) model (\code{gc_scout_11 = TRUE})
}
}
\description{
This function implements Algorithm 1 from Quan et al (2019).
Specifically, for observed pairs (\code{x},\code{y}), it estimates
the regression coefficients \eqn{\beta} for the latent linear model under
latent Gaussian Copula model: \eqn{\tilde{y} = \tilde{x}\beta + \epsilon}
}
\examples{
data(Sigma_witten)
n <- 40; d <- ncol(Sigma_witten); d3 <- 4;
delta = c(qnorm(0.5), qnorm(0.75))
dat <- mvtnorm::rmvnorm(n, sigma = Sigma_witten)
y_tilde = dat[,d]
y = y_tilde; y = exp(y_tilde);
x_tilde = dat[,-d]; x = x_tilde^5
x[,1:d3] = as.numeric(cut(x[,1:d3], breaks = c(-Inf,(delta)^5,Inf)))-1
GC_scout(x, y, lam1s = seq(0.01,0.2,length.out = 10),
 lam2s = seq(0.01,0.2,length.out = 10), d2 = seq(1:4),
 gc_scout_01 = FALSE, gc_scout_21 = TRUE, gc_scout_11 = FALSE)
}
